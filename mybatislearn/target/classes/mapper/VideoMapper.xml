<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
namespace: 名称空间，一般需要保持全局唯一，最好是和dao层的Java接口一致
可以映射sql语句到对应的方法和名称

mybatis使用接口动态代理
-->
<mapper namespace="cn.lllllan.online_class.dao.VideoMapper">
    <!--开启mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，常见下面两种。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果不配置它，当SQL被执行的时候才会去刷新缓存。

        size:引用数目，代表缓存最多可以存储多少个对象，设置过大会导致内存溢出

        readOnly:只读，缓存数据只能读取而不能修改，默认值是false
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>

    <select id="selectById" resultType="cn.lllllan.online_class.domain.Video">

        select * from video where id = #{video_id}

    </select>

    <insert id="add" parameterType="cn.lllllan.online_class.domain.Video" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">

        INSERT INTO `video` ( `title`, `summary`, `cover_img`, `price`, `create_time`, `point`)
        VALUES
              (#{title,jdbcType=VARCHAR},#{summary,jdbcType=VARCHAR},#{coverImg,jdbcType=VARCHAR},#{price,jdbcType=INTEGER},
               #{createTime,jdbcType=TIMESTAMP},#{point,jdbcType=DOUBLE});

    </insert>

    <!--批量插入-->
    <insert id="addBatch" parameterType="cn.lllllan.online_class.domain.Video" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">

        INSERT INTO `video` ( `title`, `summary`, `cover_img`, `price`, `create_time`, `point`)
        VALUES

        <foreach collection="list" item="video" separator=",">

            (#{video.title,jdbcType=VARCHAR}, #{video.summary,jdbcType=VARCHAR},
            #{video.coverImg,jdbcType=VARCHAR}, #{video.price,jdbcType=INTEGER},
            #{video.createTime,jdbcType=TIMESTAMP}, #{video.point,jdbcType=DOUBLE})

        </foreach>
    </insert>
</mapper>